from socket import socket, AF_INET, SOCK_DGRAM
from typing import Optional, Tuple


class SocketHandler:
    def __init__(
        self, port: int, ip_address: Optional[str] = None, max_connection: int = 1
    ):
        self.socket = socket()
        self.connection, self.dest_addr = self._configure_socket(
            listen_ip if ip_address else self._get_current_ip(), port, max_connection
        )
        print(f"[+] We got a connection {self.dest_addr}")

    def __del__(self):
        self.terminate_connection()

    def _configure_socket(
        self, listen_ip: str, port: int, max_connection: int
    ):
        self.socket.bind((listen_ip, port))
        self.socket.listen(max_connection)
        print(f"Listening to {listen_ip}:{port} for {max_connection} connection(s)")

        return self.socket.accept()


    def _get_current_ip(self) -> str:
        with socket(AF_INET, SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]

    def send_command(self, command: str):
        self.connection.send(command.encode())
        print(f"{self.connection.recv(1024).decode()}")

    def terminate_connection(self):
        self.socket.close()
        print("Bye!")


def parse_input():
   pass 


def main():
    socket_handler = SocketHandler(port=8081)

    while True:
        user_input = input("Shell > ")
        if "terminate" in user_input:
            break
        socket_handler.send_command(command=user_input)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(0)
